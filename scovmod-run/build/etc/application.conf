scovmod-model {
	abc {
		job {
			replicates = 2
			particles = 1000
			generations = 50
		}	
		algorithm {
			particle-retries = 100
			particle-chunk-size = 1
			tolerance-descent-percentile = 0.5
			fewest-accepted-local-particles = 0
		}
		cluster {
			system-name: scovmodfit
			max-particle-memory = 1000000
			terminate-at-target-generation = false
			futures-timeout = 90 days
 			mixing {
 				rate = 30 seconds
 				num-particles = 1000
				response-threshold = 5 seconds
			}
			size-reporting = 1 hour
		}
 	}
}	
sampler {	
	num-workers = 2

	work-dispatcher {
		executor = "thread-pool-executor"
		type = PinnedDispatcher
	}
}

akka {
    jvm-exit-on-fatal-error = on
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "INFO"
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    
    actor {
    	serialize-messages = off
	    provider = "akka.cluster.ClusterActorRefProvider"
	    deployment {
	    	/root/work-router {
	    		router = broadcast-pool
	    		nr-of-instances = ${sampler.num-workers}
          //Workers are configured (hard coded) to pick up sampler.work-dispatcher
	    	}
	    	/root/receiver {
	    		dispatcher = sampler.work-dispatcher
	    	}
	    	/root/flusher {
	    		dispatcher = sampler.work-dispatcher
	    	}
	    }
    }
    remote {
      transport-failure-detector.heartbeat-interval = 30 s
	    log-remote-lifecycle-events = off
	    log-sent-messages = off
	    log-received- messages = off
	    netty.tcp {
	    	hostname = "127.0.0.1"
	    	port = 2552
	    	maximum-frame-size = 10 MiB
	    }
    }
     
    
    cluster {
	    seed-nodes = [
		    "akka.tcp://scovmodfit@127.0.0.1:2552"
		  ]
     	failure-detector {
     		threshold = 15
     		acceptable-heartbeat-pause = 10 s
     	}
    	auto-down-unreachable-after = 1 minute    	
    }
}
